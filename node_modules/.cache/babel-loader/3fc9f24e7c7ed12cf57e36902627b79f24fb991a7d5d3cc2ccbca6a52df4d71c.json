{"ast":null,"code":"var _jsxFileName = \"/Users/joakimisaksson/Consid/Tests/astra/astra-search-cool-tv-shows/astra-z/src/Pages/Show.tsx\",\n  _s = $RefreshSig$();\nimport { Link, Typography } from '@mui/material';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport ShowDetails from '../Components/ShowDetails';\nimport { useLocalStorageShowDetails } from '../useLocalStorageShowDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Show = () => {\n  _s();\n  const location = useLocation();\n  const urlId = location.pathname.length ? location.pathname.split('/').pop() : '';\n\n  // Gertting data from localstorage\n  const [localStorageData, localStorageError, localStorageFavorite, localStorageloading] = useLocalStorageShowDetails(urlId);\n  const [show, setShow] = useState(null);\n  const [error, setError] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const getShow = id => {\n    setLoading(true);\n    axios.get('https://api.tvmaze.com/shows/' + id).then(_ref => {\n      let {\n        data\n      } = _ref;\n      setShow(data);\n      setError(false);\n    }).catch(error => {\n      console.log('Error:', error);\n      setError(true);\n    }).finally(() => setLoading(false));\n  };\n  useEffect(() => {\n    console.log(localStorageloading);\n    setLoading(localStorageloading);\n    // If there is no data in localstorage, it will fetch it from the api\n    if (urlId && !localStorageData && !localStorageloading) {\n      getShow(urlId);\n    } else {\n      setError(false);\n      setLoading(false);\n    }\n  }, [urlId, localStorageData, localStorageloading, error]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 10\n    }, this);\n  }\n  if (error && (localStorageError || error)) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Couldent find that id....\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 10\n    }, this);\n  } else return (localStorageData || show) && /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ShowDetails, {\n      data: (localStorageData === null || localStorageData === void 0 ? void 0 : localStorageData.show) || show,\n      favorite: localStorageFavorite,\n      showId: urlId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      href: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Go back to search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n};\n_s(Show, \"rVMH/69Fo/TnZzeew6kR15Dd7mU=\", false, function () {\n  return [useLocation, useLocalStorageShowDetails];\n});\n_c = Show;\nexport default Show;\nvar _c;\n$RefreshReg$(_c, \"Show\");","map":{"version":3,"names":["Link","Typography","axios","React","useEffect","useState","useLocation","ShowDetails","useLocalStorageShowDetails","Show","location","urlId","pathname","length","split","pop","localStorageData","localStorageError","localStorageFavorite","localStorageloading","show","setShow","error","setError","loading","setLoading","getShow","id","get","then","data","catch","console","log","finally"],"sources":["/Users/joakimisaksson/Consid/Tests/astra/astra-search-cool-tv-shows/astra-z/src/Pages/Show.tsx"],"sourcesContent":["import { Link, Typography } from '@mui/material';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { ITVShow } from '../types';\n\nimport ShowDetails from '../Components/ShowDetails';\nimport { useLocalStorageShowDetails } from '../useLocalStorageShowDetails';\n\nconst Show = () => {\n\tconst location = useLocation();\n\tconst urlId: string | undefined = location.pathname.length\n\t\t? location.pathname.split('/').pop()\n\t\t: '';\n\n\t// Gertting data from localstorage\n\tconst [\n\t\tlocalStorageData,\n\t\tlocalStorageError,\n\t\tlocalStorageFavorite,\n\t\tlocalStorageloading,\n\t] = useLocalStorageShowDetails(urlId);\n\n\tconst [show, setShow] = useState<ITVShow | null>(null);\n\tconst [error, setError] = useState(true);\n\tconst [loading, setLoading] = useState(true);\n\n\tconst getShow = (id: string) => {\n\t\tsetLoading(true);\n\t\taxios\n\t\t\t.get('https://api.tvmaze.com/shows/' + id)\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetShow(data);\n\t\t\t\tsetError(false);\n\t\t\t})\n\t\t\t.catch((error: Error) => {\n\t\t\t\tconsole.log('Error:', error);\n\t\t\t\tsetError(true);\n\t\t\t})\n\t\t\t.finally(() => setLoading(false));\n\t};\n\n\tuseEffect(() => {\n\t\tconsole.log(localStorageloading);\n\t\tsetLoading(localStorageloading);\n\t\t// If there is no data in localstorage, it will fetch it from the api\n\t\tif (urlId && !localStorageData && !localStorageloading) {\n\t\t\tgetShow(urlId);\n\t\t} else {\n\t\t\tsetError(false);\n\t\t\tsetLoading(false);\n\t\t}\n\t}, [urlId, localStorageData, localStorageloading, error]);\n\tif (loading) {\n\t\treturn <h1>Loading</h1>;\n\t}\n\tif (error && (localStorageError || error)) {\n\t\treturn <h1>Couldent find that id....</h1>;\n\t} else\n\t\treturn (\n\t\t\t(localStorageData || show) && (\n\t\t\t\t<>\n\t\t\t\t\t<ShowDetails\n\t\t\t\t\t\tdata={localStorageData?.show || show}\n\t\t\t\t\t\tfavorite={localStorageFavorite}\n\t\t\t\t\t\tshowId={urlId}\n\t\t\t\t\t/>\n\t\t\t\t\t<Link href=\"/\">\n\t\t\t\t\t\t<Typography>Go back to search</Typography>\n\t\t\t\t\t</Link>\n\t\t\t\t</>\n\t\t\t)\n\t\t);\n};\n\nexport default Show;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}